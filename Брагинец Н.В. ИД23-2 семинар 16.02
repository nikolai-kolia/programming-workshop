{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb1dd0ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "4. Реализовать программное средство для представления IP адресов с\n",
    "десятичного и двоичного кодирования. В качестве входных данных задается\n",
    "десятичное представление IP адреса, программное средство выдает двоичное\n",
    "представление или пользователь может ввести двоичное представление IP\n",
    "адреса и получить десятичное представление."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "191d8828",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите IP адрес: 192.100.0.0\n",
      "11000000.01100100.00000000.00000000\n"
     ]
    }
   ],
   "source": [
    "a = input(\"Введите IP адрес: \")\n",
    "result = ''\n",
    "count = 0\n",
    "if len(a) == 35:\n",
    "    count = 0\n",
    "    numbers = a.split(\".\")\n",
    "    x = 0\n",
    "    for i in range(len(numbers)):\n",
    "        for j in range(len(numbers[i])):\n",
    "            x = x + int(numbers[i][j]) * (2**(8 - j - 1))\n",
    "        result += str(x) + '.'\n",
    "        x = 0\n",
    "    print(result[:-1])\n",
    "elif 7 <= len(a) <= 15:\n",
    "    numbers = a.split(\".\")\n",
    "    for i in range(len(numbers)):\n",
    "        if int(numbers[i]) > 255:\n",
    "            print(\"Введите нормальный IP адрес\")\n",
    "            break\n",
    "        bite = '{0:b}'.format(int(numbers[i]))\n",
    "        if len(bite) < 8:\n",
    "            x = \"0\"  (8 - len(bite)) \n",
    "            result += x + bite + '.'\n",
    "        else:\n",
    "            x = \"\"\n",
    "            result += x + bite + '.'\n",
    "    for i in range(len(numbers)):\n",
    "        if int(numbers[i]) <= 255:\n",
    "            count += 1\n",
    "    if count == 4:\n",
    "        print(result[:-1])\n",
    "elif len(a) < 8 or len(a) > 36:\n",
    "    print(\"Введите нормальный IP адрес\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c504026",
   "metadata": {},
   "outputs": [],
   "source": [
    "5. Реализовать программное средство, способное определять класс сети,\n",
    "начальный и конечный адрес и маску подсети, на основании заданного IP\n",
    "адреса."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6468517f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите IP адрес: 192.100.0.0\n",
      "Класс С\n",
      "Начальный адрес: 192.0.0.0\n",
      "Конечный адрес: 223.255.255.255\n",
      "Маска подсети: 255.255.255.0\n"
     ]
    }
   ],
   "source": [
    "a = input(\"Введите IP адрес: \")\n",
    "numbers = a.split(\".\")\n",
    "x = int(numbers[0])\n",
    "if 0 <= x < 128:\n",
    "    n = 8\n",
    "    print(\"Класс А\")\n",
    "    print(\"Начальный адрес: 0.0.0.0\")\n",
    "    print(\"Конечный адрес: 127.255.255.255\")\n",
    "    print(\"Маска подсети: 255.0.0.0\")\n",
    "if 128 <= x < 192:\n",
    "    n = 16\n",
    "    print(\"Класс В\")\n",
    "    print(\"Начальный адрес: 128.0.0.0\")\n",
    "    print(\"Конечный адрес: 191.255.255.255\")\n",
    "    print(\"Маска подсети: 255.255.0.0\")\n",
    "if 192 <= x < 224:\n",
    "    n = 24\n",
    "    print(\"Класс С\")\n",
    "    print(\"Начальный адрес: 192.0.0.0\")\n",
    "    print(\"Конечный адрес: 223.255.255.255\")\n",
    "    print(\"Маска подсети: 255.255.255.0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d209019",
   "metadata": {},
   "source": [
    "6. Разработать программное средство, которое по заданной сети, \n",
    "количеству подсетей и хостов формирует: маску для проекта сети, а также \n",
    "определяет класс сетей, начало и конец сети, количество IP-адресов в сети, \n",
    "количество доступных IP-адресов в сети для назначения хостам, стек первых \n",
    "5 допустимых IP-адресов, стек последних 5 допустимых IP-адресов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8cd74d69",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите сеть: 192.100.0.0\n",
      "Введите кол-во подсетей: 50\n",
      "Введите кол-вo хостов: 43\n",
      "Класс С\n",
      "Начальный адрес: 192.0.0.0\n",
      "Конечный адрес: 223.255.255.255\n",
      "Маска: \n",
      "11111111.11111111.11111111.11000000Стек первых 5 допустимых IP-адресов: \n",
      "192.100.0.1\n",
      "192.100.0.2\n",
      "192.100.0.3\n",
      "192.100.0.4\n",
      "192.100.0.5\n",
      "Стек последних 5 допустимых IP-адресов: \n",
      "192.255.255.254\n",
      "192.255.255.253\n",
      "192.255.255.252\n",
      "192.255.255.251\n",
      "192.255.255.250\n"
     ]
    }
   ],
   "source": [
    "a = input(\"Введите сеть: \")\n",
    "b = int(input(\"Введите кол-во подсетей: \"))\n",
    "c = int(input(\"Введите кол-вo хостов: \"))\n",
    "numbers = a.split(\".\")\n",
    "x = int(numbers[0])\n",
    "maska = \"\"\n",
    "s = 0\n",
    "v = -1\n",
    "if 0 <= x < 128:\n",
    "    n = 8\n",
    "    print(\"Класс А\")\n",
    "    print(\"Начальный адрес: 0.0.0.0\")\n",
    "    print(\"Конечный адрес: 127.255.255.255\")\n",
    "    for i in range(32 - n):\n",
    "        if b > 2**i:\n",
    "            s += 1\n",
    "    h = 32 - n - s\n",
    "    maska_numbers = n + h\n",
    "    maska = \"1\" * maska_numbers + \"0\" * (32 - maska_numbers)\n",
    "    print(\"Маска: \")\n",
    "    for i in range(len(maska)):\n",
    "        if i % 8 == 0 and i > 0:\n",
    "            print(\".\", end=\"\")\n",
    "        print(maska[i], end=\"\")\n",
    "    if 2**h - 2 > b:\n",
    "        print(\"\\nКол-во IP-адресов в сети: \", 2**h)\n",
    "        print(\"Кол-во доступных IP-адресов в сети: \", 2**h - 2)\n",
    "if 128 <= x < 192:\n",
    "    n = 16\n",
    "    print(\"Класс В\")\n",
    "    print(\"Начальный адрес: 128.0.0.0\")\n",
    "    print(\"Конечный адрес: 191.255.255.255\")\n",
    "    for i in range(32 - n):\n",
    "        if b > 2**i:\n",
    "            s += 1\n",
    "    h = 32 - n - s\n",
    "    maska_numbers = n + h\n",
    "    maska = \"1\" * maska_numbers + \"0\" * (32 - maska_numbers)\n",
    "    print(\"Маска: \")\n",
    "    for i in range(len(maska)):\n",
    "        if i % 8 == 0 and i > 0:\n",
    "            print(\".\", end=\"\")\n",
    "        print(maska[i], end=\"\")\n",
    "    if 2**h - 2 > b:\n",
    "        print(\"\\nКол-во IP-адресов в сети: \", 2 ** h)\n",
    "        print(\"Кол-во доступных IP-адресов в сети: \", 2 ** h - 2)\n",
    "if 192 <= x < 224:\n",
    "    n = 24\n",
    "    print(\"Класс С\")\n",
    "    print(\"Начальный адрес: 192.0.0.0\")\n",
    "    print(\"Конечный адрес: 223.255.255.255\")\n",
    "    for i in range(32 - n):\n",
    "        if b > 2**i:\n",
    "            s += 1\n",
    "    h = 32 - n -s\n",
    "    maska_numbers = n + h\n",
    "    maska = \"1\" * maska_numbers + \"0\" * (32 - maska_numbers)\n",
    "    print(\"Маска: \")\n",
    "    for i in range(len(maska)):\n",
    "        if i % 8 == 0 and i > 0:\n",
    "            print(\".\", end=\"\")\n",
    "        print(maska[i], end=\"\")\n",
    "    if 2 ** h - 2 > b:\n",
    "        print(\"\\nКол-во IP-адресов в сети: \", 2 ** h)\n",
    "        print(\"Кол-во доступных IP-адресов в сети: \", 2 ** h - 2)\n",
    "print(\"Стек первых 5 допустимых IP-адресов: \")\n",
    "numbers[3] = int(numbers[3]) + 1\n",
    "print(f'{numbers[0]}.{numbers[1]}.{numbers[2]}.{numbers[3]}')\n",
    "numbers[3] = int(numbers[3]) + 1\n",
    "print(f'{numbers[0]}.{numbers[1]}.{numbers[2]}.{numbers[3]}')\n",
    "numbers[3] = int(numbers[3]) + 1\n",
    "print(f'{numbers[0]}.{numbers[1]}.{numbers[2]}.{numbers[3]}')\n",
    "numbers[3] = int(numbers[3]) + 1\n",
    "print(f'{numbers[0]}.{numbers[1]}.{numbers[2]}.{numbers[3]}')\n",
    "numbers[3] = int(numbers[3]) + 1\n",
    "print(f'{numbers[0]}.{numbers[1]}.{numbers[2]}.{numbers[3]}')\n",
    "numbers[3] = int(numbers[3]) - 5\n",
    "print(\"Стек последних 5 допустимых IP-адресов: \")\n",
    "print(numbers[0] + \".255.255.254\")\n",
    "print(numbers[0] + \".255.255.253\")\n",
    "print(numbers[0] + \".255.255.252\")\n",
    "print(numbers[0] + \".255.255.251\")\n",
    "print(numbers[0] + \".255.255.250\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
